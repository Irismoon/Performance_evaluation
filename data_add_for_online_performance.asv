data_index=data_index+1;
data_index_mod=mod(data_index-1,DATA_LENGTH)+1;
%在线滤波
data_unfilter(data_index_mod,:)=x(ch);%C++里扔进来的数据存起来
if data_index_mod<=filt_n+1
    xx=[filter_b(2:data_index_mod),-filter_a(2:data_index_mod)];
    yy=[data_unfilter(data_index_mod-1:-1:1,:);data(data_index-1:-1:1,:)];
else
    xx=[filter_b(2:filt_n+1),-filter_a(2:filt_n+1)];
    yy=[data_unfilter(data_index_mod-1:-1:data_index_mod-filt_n,:);
        data(data_index_mod-1:-1:data_index_mod-filt_n,:)];
end
data(data_index_mod,:)=filter_b(1)*data_unfilter(data_index_mod,:);
if(size(xx,2)>0)
    data(data_index_mod,:)=data(data_index_mod,:)+xx*yy;
end

%数据处理
if mod(data_index,slide)==0%每slide个数据处理一次
    if IS_TRAIN
       % if mod(data_index,TRIAL)>(TRIAL_TRAISIENT) || mod(data_index,TRIAL)==0
         if(data_index_mod>segment)
            index=index+1;
            Y=data(data_index_mod-segment+1:data_index_mod,:)';%4个通道窗长内数据
            for j=1:frecount
                z = [reference{j};Y];%将两个矩阵合成一个矩阵
                C = cov(z.');      %计算自协方差矩阵
                Cxx = C(1:sx, 1:sx) + 10^(-8)*eye(sx);   %求得X的自协方差矩阵
                Cxy = C(1:sx, sx+1:sx+sy);         %求得X和Ｙ的互协方差矩阵
                Cyx = Cxy';
                Cyy = C(sx+1:sx+sy, sx+1:sx+sy) + 10^(-8)*eye(sy);%求得Y的自协方差矩阵
                [Wx,r] = eig((Cxx\Cxy)*(Cyy\Cyx));%注意加括号，r is eigenvalues;A*Wx = r*Wx，r的index与Wx的列的index对应
                r = sqrt(real(r));      % Canonical correlations   典型相关系数
                r = diag(r);%矩阵转换成向量后上下翻转
                [r,I]= sort((real(r)));
                r = flipud(r);	
                rou(j) = r(1);
            end
%             rou(1) = rou(1)+ 0.1;%LRJ
%             rou(3) = rou(3)+ 0.1;%WM
%             rou(4) = rou(4)+ 0.1;%WM
%             rou(2) = rou(2)-0.05; rou(3)=rou(3)-0.05;                   %lss
            R(index,:) = rou;
%             [velocity,signal] = max(rou);
%             if velocity<=0.4
%                 signal = 5;
%             end
%             variance = var(rou);
% %            signal = signal-1;
%             Vari(index) = variance;
%             output = [signal velocity variance];
%             Signal(index) = signal;
            trigger(index) = x(DATA_CHANNEL+1);
         %end
         
         if data_index==DATA_LENGTH
                N=length(trigger);
                [C,err,P,logp,coeff] = classify(R(1,:),R(1:N,:),trigger(1:N));
                save('coeff.mat','coeff');
         end
        end
    else
        if(data_index_mod>segment)
            index=index+1;
            Y=data(data_index_mod-segment+1:data_index_mod,:)';%4个通道窗长内数据
            for j=1:frecount
                z = [reference{j};Y];%将两个矩阵合成一个矩阵
                C = cov(z.');      %计算自协方差矩阵
                Cxx = C(1:sx, 1:sx) + 10^(-8)*eye(sx);   %求得X的自协方差矩阵
                Cxy = C(1:sx, sx+1:sx+sy);         %求得X和Ｙ的互协方差矩阵
                Cyx = Cxy';
                Cyy = C(sx+1:sx+sy, sx+1:sx+sy) + 10^(-8)*eye(sy);%求得Y的自协方差矩阵
                [Wx,r] = eig((Cxx\Cxy)*(Cyy\Cyx));%注意加括号，r is eigenvalues;A*Wx = r*Wx，r的index与Wx的列的index对应
                r = sqrt(real(r));      % Canonical correlations   典型相关系数
                r = diag(r);%矩阵转换成向量后上下翻转
                [r,I]= sort((real(r)));
                r = flipud(r);	
                rou(j) = r(1);
            end
            r=zeros(1,5);
            r(1)=r(1)+(coeff(1,2).linear'*rou'+coeff(1,2).const>0);
            r(1)=r(1)+(coeff(1,3).linear'*rou'+coeff(1,3).const>0);
            r(1)=r(1)+(coeff(1,4).linear'*rou'+coeff(1,4).const>0);
            r(1)=r(1)+(coeff(1,5).linear'*rou'+coeff(1,5).const>0);

            r(2)=r(2)+(coeff(2,1).linear'*rou'+coeff(2,1).const>0);
            r(2)=r(2)+(coeff(2,3).linear'*rou'+coeff(2,3).const>0);
            r(2)=r(2)+(coeff(2,4).linear'*rou'+coeff(2,4).const>0);
            r(2)=r(2)+(coeff(2,5).linear'*rou'+coeff(2,5).const>0);

            r(3)=r(3)+(coeff(3,1).linear'*rou'+coeff(3,1).const>0);
            r(3)=r(3)+(coeff(3,2).linear'*rou'+coeff(3,2).const>0);
            r(3)=r(3)+(coeff(3,4).linear'*rou'+coeff(3,4).const>0);
            r(3)=r(3)+(coeff(3,5).linear'*rou'+coeff(3,5).const>0);
            
            r(4)=r(4)+(coeff(4,1).linear'*rou'+coeff(4,1).const>0);
            r(4)=r(4)+(coeff(4,3).linear'*rou'+coeff(4,3).const>0);
            r(4)=r(4)+(coeff(4,2).linear'*rou'+coeff(4,2).const>0);
            r(4)=r(4)+(coeff(4,5).linear'*rou'+coeff(4,5).const>0);
            
            r(5)=r(5)+(coeff(5,1).linear'*rou'+coeff(5,1).const>0);
            r(5)=r(5)+(coeff(5,3).linear'*rou'+coeff(5,3).const>0);
            r(5)=r(5)+(coeff(5,4).linear'*rou'+coeff(5,4).const>0);
            r(5)=r(5)+(coeff(5,2).linear'*rou'+coeff(5,2).const>0);
            
            [b,signal2(k)]=max(r(1:));
            signal2(k)=signal2(k)-1;
            k=k+1;
        end
else
    signal=-1;
    velocity=0;
    variance=0;
    output = [signal velocity variance];
end